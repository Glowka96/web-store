package com.example.portfolio.webstorespring.services.products;

import com.example.portfolio.webstorespring.buildhelpers.products.DiscountBuilderHelper;
import com.example.portfolio.webstorespring.buildhelpers.products.SubcategoryBuilderHelper;
import com.example.portfolio.webstorespring.exceptions.DiscountIsInvalid;
import com.example.portfolio.webstorespring.model.dto.products.request.DiscountRequest;
import com.example.portfolio.webstorespring.model.dto.products.response.DiscountAdminResponse;
import com.example.portfolio.webstorespring.model.dto.products.response.DiscountUserResponse;
import com.example.portfolio.webstorespring.model.entity.products.Discount;
import com.example.portfolio.webstorespring.repositories.products.DiscountRepository;
import org.jetbrains.annotations.NotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;
import java.util.Set;

import static com.example.portfolio.webstorespring.buildhelpers.products.DiscountBuilderHelper.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DiscountServiceTest {

    @Mock
    private DiscountRepository discountRepository;
    @Mock
    private SubcategoryService subcategoryService;
    @InjectMocks
    private DiscountService underTest;

    @Test
    void shouldGetDiscountByDiscountCode() {
        Discount discount = DiscountBuilderHelper.createDiscount();
        given(discountRepository.findByCode(anyString())).willReturn(Optional.of(discount));

        DiscountUserResponse discountUserResponse = underTest.getByCode(discount.getCode());

        assertEquals(discount.getDiscountRate(), discountUserResponse.discountRate());
    }

    @Test
    void willThrowDiscountIsInvalid_whenNotFoundDiscount() {
        assertThrows(DiscountIsInvalid.class, () -> underTest.getByCode("test"));

        verify(discountRepository, times(1)).findByCode("test");
        verifyNoMoreInteractions(discountRepository);
    }

    @Test
    void shouldSaveDiscount_whenNotGiveCode_thenAutoGenerated() {
        DiscountRequest discountRequest = createDiscountRequestWithoutCode();

        DiscountAdminResponse savedDiscountAdminResponse = getSavedDiscountAdminResponse(discountRequest);

        DiscountAdminResponse mappedDiscountAdminResponse = getDiscountAdminResponseFromArgumentCapture();

        assertDiscountResponses(mappedDiscountAdminResponse, savedDiscountAdminResponse);
        assertEquals(10, savedDiscountAdminResponse.code().length());
    }

    @Test
    void shouldSaveDiscount_whenGiveCode_thenNoAutoGenerated() {
        DiscountRequest discountRequest = createDiscountRequestWithCode();

        DiscountAdminResponse savedDiscountAdminResponse = getSavedDiscountAdminResponse(discountRequest);

        DiscountAdminResponse mappedDiscountAdminResponse = getDiscountAdminResponseFromArgumentCapture();

        assertDiscountResponses(mappedDiscountAdminResponse, savedDiscountAdminResponse);
        assertEquals(discountRequest.code(), savedDiscountAdminResponse.code());
    }

    @Test
    void shouldDeleteDiscount_whenIsUserOrExpired() {
        underTest.deleteUsedOrExpiredDiscount();

        verify(discountRepository, times(1)).deleteZeroQuantityOrExpiredDiscounts();
        verifyNoMoreInteractions(discountRepository);
    }

    @Test
    void shouldUseDiscountByCode_whenFoundIt_thenDecreaseQuantityAndReturnIt() {
        Discount discount = createDiscount();
        Long exceptedQuantity = discount.getQuantity() - 1;

        given(discountRepository.findByCode(anyString())).willReturn(Optional.of(discount));

        Discount result = underTest.applyByCode(discount.getCode());

        assertEquals(exceptedQuantity, result.getQuantity());
        verify(discountRepository,times(1)).findByCode(discount.getCode());
        verify(discountRepository, times(1)).save(discount);
        verifyNoMoreInteractions(discountRepository);
    }

    private DiscountAdminResponse getSavedDiscountAdminResponse(DiscountRequest discountRequest) {
        given(subcategoryService.findAllByNames(anySet())).willReturn(Set.of(SubcategoryBuilderHelper.createSubcategory()));
        return underTest.save(discountRequest);
    }

    @NotNull
    private DiscountAdminResponse getDiscountAdminResponseFromArgumentCapture() {
        ArgumentCaptor<Discount> discountArgumentCaptor =
                ArgumentCaptor.forClass(Discount.class);
        verify(discountRepository).save(discountArgumentCaptor.capture());

        return DiscountAdminResponse.mapToResponse(discountArgumentCaptor.getValue());
    }

    private static void assertDiscountResponses(DiscountAdminResponse mappedDiscountAdminResponse, DiscountAdminResponse savedDiscountAdminResponse) {
        assertEquals(mappedDiscountAdminResponse, savedDiscountAdminResponse);
        assertNotNull(savedDiscountAdminResponse.code());
    }
}
